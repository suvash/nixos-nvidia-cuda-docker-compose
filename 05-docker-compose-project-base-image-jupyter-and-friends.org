* 05. Prepare a compose project with the base image & jupyter with other libraries

Now that you have prepare a separate base image in the previous step with the Python runtime and base libraries, it can be used in a docker compose project.

We will walk through an example project here, setting up a Jupyter project along with some additional libraries.

Similar to the previous step, the project files have been made available in the 05-files directory. Make sure that you are matching the CUDA version on your host OS and base images.

** Copy over the contents of the 05-files and update as needed

Copy the contents of 05-files to a new project directory.

Some updates has to be made to some file before we can proceed.

+ Dockerfile : Fix the image tag based on what you got from previous step
+ compose.yml : Make sure the volume mounts look good, or update them as needed.
+ compose.yml : Check the port bindings and make sure it's updated if you change the jupyter config.
+ requirements.txt : Add/Update the libraries in requirements.txt
+ jupyter_server_config.py : Update the password for jupyterlab if you want, else the current one is set to the string "jupyterlab".

We use a custom entrypoint as well, so that we can drop root credentials and use the correct uid:gid when starting out the jupyterlab process within the container. This ensures that files will be read and written correctly with the host uid:gid. This is handled automatically by the Makefile.

** Build the project and use it via the Makefile

The provided Makefile does a bunch of homekeeping and handles starting/stopping the Jupyter server as well as a (new) container bash prompt.

#+begin_src shell
  cd /to/where/the/project/is/located
  make help

  # Rebuild the images
  make build

  # Start/stop jupyter lab
  make start
  make stop

  # Tail logs
  make logs

  # Get a bash terminal on a new container
  make bash
#+end_src

